<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--引入database。properties-->
   <context:property-placeholder location="classpath:database.properties"/>
<!--配置redis -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testWhileIdle" value="true"/>
    </bean>
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg ref="jedisPoolConfig"/>
        <constructor-arg value="${redis.host}"/>
        <constructor-arg value="${redis.port}"/>
        <constructor-arg value="${redis.timeout}"/>
        <constructor-arg value="${redis.pass}"/>
        <constructor-arg value="${redis.default.db}"/>



    </bean>
    <bean id="redisAPI" class="com.appinfodb.tools.RedisAPI">
        <property name="jedisPool" ref="jedisPool"/>
    </bean>



    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:database.properties"/>
    </bean>
    <!--配置数据源-->
    <bean id="dataSource" destroy-method="close" scope="singleton"
          class="org.apache.commons.dbcp.BasicDataSource"
    >
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${initialSize}"/>
        <property name="maxActive" value="${maxActive}"/>
        <property name="maxIdle" value="${maxIdle}"/>
        <property name="minIdle" value="${minIdle}"/>
        <property name="maxWait" value="${maxWait}"/>
        <property name="removeAbandoned" value="${removeAbandoned}"/>
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
        <!--sql 心跳-->
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="validationQuery" value="select 1"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="numTestsPerEvictionRun" value="${maxActive}"/>

    </bean>
    <!--配置sqlSessionFactory会话工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>

    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--配置事务使用注解-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--为指定的事务管理器设定规则-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" propagation="SUPPORTS" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exceptinon"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>


    </tx:advice>

    <!--Aop事务处理实现-->
    <aop:aspectj-autoproxy/>
    <aop:config proxy-target-class="true">
        <aop:pointcut id="transService" expression="execution(* *com.smbms.service..*(..))"/>
        <aop:advisor pointcut-ref="transService" advice-ref="txAdvice"/>
    </aop:config>
    <import resource="applicationContext-mapper.xml"/>
    <import resource="applicationContext-service.xml"/>



</beans>